version: 2
jobs:
  build:
    docker:

      - image: scuevals/circleci
        environment:
          FLASK_ENV: test
          JWT_SECRET_KEY: lHmxPAbKYd4wCQctLEuJK7K5CTlQb8sP
          TEST_DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable

      - image: circleci/postgres:9.6
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: ""

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "setup.py" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python setup.py install_egg_info
            pip install -e .

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "setup.py" }}

      - run:
          name: Run test coverage verification
          command: |
            . venv/bin/activate
            (coverage run --source=scuevals_api setup.py test && coverage report --fail-under=100 && coveralls)

      - run:
          name: Run documentation tests
          command: |
            . venv/bin/activate
            dredd

      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy-staging:
    machine:
        enabled: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Restore Database From Production
          command: |
            if [ "$DEPLOY_STAGING_RESTORE_DB" == "1" ]; then
              ssh root@$DOKKU_SERVER "dokku postgres:connect staging-db" < .circleci/reset_db.sql
              ssh root@$DOKKU_SERVER "dokku postgres:export db | dokku postgres:import staging-db"
              ssh root@$DOKKU_SERVER "dokku run staging-api 'alembic upgrade head'"
            else
              echo Skipping DB restore according to env var...
            fi
      - run:
          name: Deploy to Dokku
          command: |
            git remote add dokku $DOKKU_STAGING
            echo Pushing to Dokku...
            git push dokku develop:master &>/dev/null

  deploy-production:
    machine:
        enabled: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Deploy to Dokku
          command: |
            git remote add dokku $DOKKU_PRODUCTION
            echo Pushing to Dokku...
            git push dokku master:master &>/dev/null

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy-staging:
          filters:
            branches:
              only: develop
          requires:
            - build
      - deploy-production:
          filters:
            branches:
              only: master
          requires:
            - build
